(load-file "rewrite.egi")
(load-file "example.egi")

;;======================= Knuth-Bendix completion ==============================

(define $rename-pair
  (lambda [$eq1 $eq2]
    (let* {[$fvs1 (efv eq1)]
           [$fvs2 (efv eq2)]
           [$sigma1 (zip fvs1 (map (lambda $x <Var x>) (from 0)))]
           [$sigma2 (zip fvs2 (map (lambda $x <Var x>) (from (length fvs1))))]}
      [(esubst sigma1 eq1) (esubst sigma2 eq2)]
      )))

;; [equation equation] -> {[term term]}
(define $critical-pairs'
  (match-all-lambda [equation equation]
    {[[<dequation $l1 $r1>
       <dequation (& !,l1 <subterm-nonv <unify ,l1 $sigma> $context>) $r2>]
      [(tsubst sigma r2) (tsubst sigma (context r1))]]
     }))

;; [equation equation] -> {[term term]}
(define $critical-pairs
  (match-lambda [equation equation]
    {[[$eq1 ,eq1] (critical-pairs' (rename-pair [eq1 eq1]))]
     [[$eq1 $eq2]
      (let {[[$eq1' $eq2'] (rename-pair [eq1 eq2])]}
        {@(critical-pairs' [eq1' eq2']) @(critical-pairs' [eq2' eq1'])})]
     }))

(define $critical-pairs-for-set
  (lambda [$eqs]
    (concat
      (match-all eqs (set equation)
        {[<cons $eq1 <cons $eq2 _>>
          (critical-pairs' (rename-pair [eq1 eq2]))]
        }))))

(define $orient
  (lambda [$l $r]
    (if (succ? l r)
        (Just (eql l r))
        (if (succ? r l)
            (Just (eql r l))
            Nothing))))

(define $report
  (lambda [$eqs $crits $deferred]
    (print
      (S.concat {(show (length eqs)) " eqs, "
                 (show (length crits)) " pending critical pairs; "
                 (show (length deferred)) " deferred"}))))

(define $complete-loop
  (lambda [$eqs $crits $deferred]
    (io (do {[(report eqs crits deferred)]}
      (return
        (match [crits deferred] [(list [term term]) (list [term term])]
          {[[<nil> <nil>] eqs]
           [[<nil> <cons [$l $r] $defs'>]
            (match (orient l r) (maybe something)
              {[(just $new-axiom)
                (let {[$new-eqs {@eqs (debug/fn show-equation new-axiom)}]
                      [$new-crits (concat (map (critical-pairs new-axiom $1) new-eqs))]}
                  (complete-loop new-eqs new-crits defs'))
                ]
               [(nothing) {}]})] ; failed completion
           [[<cons [$l $r] $crits'> _]
            (let {[$l' (rewrite eqs l)]
                  [$r' (rewrite eqs r)]}
              (if (eq? l' r')
                  (complete-loop eqs crits' deferred)
                  (match (orient l' r') (maybe something)
                    {[(just $new-axiom)
                      (let* {[$new-eqs {@eqs (debug/fn show-equation new-axiom)}]
                             [$new-crits (concat (map (critical-pairs new-axiom $1) new-eqs))]}
                        (complete-loop
                          new-eqs
                          {@crits' @new-crits}
                          deferred))
                      ]
                     [(nothing)
                      (complete-loop eqs crits' (cons [l' r'] deferred))
                      ]
                     })))]}))))))

(define $complete
  (lambda [$eqs]
    (complete-loop eqs
                   (critical-pairs-for-set eqs)
                   {})))

;;==============================================================================

(define $show-term-pair
  (match-lambda [term term]
    {[[$l $r] (S.concat {"[" (show-term l) ", " (show-term r) "]"})]}))

(define $show-term-pairs
  (col-show/fn show-term-pair $1))

;;==============================================================================

(define $axioms-of-groups-completion-result
  {
   <Equation <Compound "*" {<Compound "e" {}> <Var 0>}> <Var 0>>
   <Equation <Compound "*" {<Compound "i" {<Var 0>}> <Var 0>}> <Compound "e" {}>>
   <Equation <Compound "*" {<Compound "*" {<Var 0> <Var 1>}> <Var 2>}> <Compound "*" {<Var 0> <Compound "*" {<Var 1> <Var 2>}>}>>
   <Equation <Compound "*" {<Compound "i" {<Var 0>}> <Compound "*" {<Var 0> <Var 2>}>}> <Var 2>>
   <Equation <Compound "*" {<Compound "i" {<Compound "e" {}>}> <Var 3>}> <Var 3>>
   <Equation <Compound "*" {<Compound "i" {<Compound "i" {<Var 3>}>}> <Compound "e" {}>}> <Var 3>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 4> <Var 5>}>}> <Compound "*" {<Var 4> <Compound "*" {<Var 5> <Var 3>}>}>}> <Var 3>>
   <Equation <Compound "*" {<Compound "i" {<Compound "i" {<Var 0>}>}> <Var 2>}> <Compound "*" {<Var 0> <Var 2>}>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Compound "e" {}>}>}> <Compound "*" {<Var 0> <Var 5>}>}> <Var 5>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Compound "i" {<Var 5>}>}>}> <Compound "*" {<Var 0> <Compound "e" {}>}>}> <Var 5>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Compound "i" {<Compound "*" {<Var 2> <Var 4>}>}> <Var 2>}>}> <Compound "e" {}>}> <Var 4>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 6> <Compound "*" {<Var 7> <Var 5>}>}>}> <Compound "*" {<Var 6> <Compound "*" {<Var 7> <Compound "*" {<Var 5> <Var 4>}>}>}>}> <Var 4>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Compound "i" {<Var 5>}>}>}> <Compound "*" {<Var 0> <Var 7>}>}> <Compound "*" {<Var 5> <Var 7>}>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Var 2>}>}> <Var 0>}>}> <Var 4>}> <Compound "*" {<Var 2> <Var 4>}>>
   <Equation <Compound "*" {<Var 1> <Compound "i" {<Var 1>}>}> <Compound "e" {}>>
   <Equation <Compound "*" {<Var 1> <Compound "*" {<Compound "i" {<Var 1>}> <Var 4>}>}> <Var 4>>
   <Equation <Compound "*" {<Var 1> <Compound "e" {}>}> <Var 1>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 4> <Compound "*" {<Var 5> <Compound "i" {<Var 2>}>}>}>}> <Compound "*" {<Var 4> <Var 5>}>}> <Var 2>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 3> <Compound "i" {<Var 2>}>}>}> <Var 3>}> <Var 2>>
   <Equation <Compound "i" {<Compound "*" {<Compound "i" {<Compound "*" {<Var 4> <Compound "*" {<Var 5> <Var 3>}>}>}> <Compound "*" {<Var 4> <Var 5>}>}>}> <Var 3>>
   <Equation <Compound "i" {<Compound "*" {<Compound "i" {<Var 5>}> <Compound "i" {<Var 3>}>}>}> <Compound "*" {<Var 3> <Var 5>}>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Compound "*" {<Compound "i" {<Compound "*" {<Var 4> <Var 6>}>}> <Var 4>}>}>}> <Var 0>}> <Var 6>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Compound "*" {<Var 8> <Compound "*" {<Var 9> <Var 7>}>}>}>}> <Compound "*" {<Var 0> <Compound "*" {<Var 8> <Compound "*" {<Var 9> <Compound "*" {<Var 7> <Var 6>}>}>}>}>}> <Var 6>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Compound "*" {<Var 2> <Compound "i" {<Var 7>}>}>}>}> <Compound "*" {<Var 0> <Compound "*" {<Var 2> <Var 9>}>}>}> <Compound "*" {<Var 7> <Var 9>}>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 0> <Compound "*" {<Compound "i" {<Compound "*" {<Var 7> <Var 9>}>}> <Var 7>}>}>}> <Compound "*" {<Var 0> <Var 11>}>}> <Compound "*" {<Var 9> <Var 11>}>>
   <Equation <Compound "*" {<Var 3> <Compound "*" {<Compound "i" {<Compound "*" {<Var 1> <Var 3>}>}> <Var 1>}>}> <Compound "e" {}>>
   <Equation <Compound "*" {<Var 3> <Compound "*" {<Compound "i" {<Compound "*" {<Var 1> <Var 3>}>}> <Compound "*" {<Var 1> <Var 6>}>}>}> <Var 6>>
   <Equation <Compound "*" {<Var 3> <Compound "i" {<Compound "*" {<Compound "i" {<Var 6>}> <Var 3>}>}>}> <Var 6>>
   <Equation <Compound "i" {<Compound "*" {<Var 3> <Compound "i" {<Compound "*" {<Var 1> <Var 3>}>}>}>}> <Var 1>>
   <Equation <Compound "*" {<Var 3> <Compound "*" {<Compound "i" {<Compound "*" {<Var 6> <Compound "*" {<Var 8> <Var 3>}>}>}> <Compound "*" {<Var 6> <Compound "*" {<Var 8> <Var 10>}>}>}>}> <Var 10>>
   <Equation <Compound "*" {<Var 3> <Compound "*" {<Compound "i" {<Compound "*" {<Compound "i" {<Var 7>}> <Var 3>}>}> <Var 5>}>}> <Compound "*" {<Var 7> <Var 5>}>>
   <Equation <Compound "i" {<Compound "e" {}>}> <Compound "e" {}>>
   <Equation <Compound "*" {<Var 3> <Compound "*" {<Var 4> <Compound "i" {<Compound "*" {<Var 3> <Var 4>}>}>}>}> <Compound "e" {}>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 2> <Var 0>}>}> <Var 2>}> <Compound "i" {<Var 0>}>>
   <Equation <Compound "*" {<Var 3> <Compound "i" {<Compound "i" {<Compound "i" {<Var 3>}>}>}>}> <Compound "e" {}>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 2> <Compound "*" {<Var 4> <Var 0>}>}>}> <Compound "*" {<Var 2> <Var 4>}>}> <Compound "i" {<Var 0>}>>
   <Equation <Compound "i" {<Compound "*" {<Var 0> <Compound "i" {<Var 5>}>}>}> <Compound "*" {<Var 5> <Compound "i" {<Var 0>}>}>>
   <Equation <Compound "*" {<Var 4> <Compound "*" {<Var 5> <Compound "*" {<Compound "i" {<Compound "*" {<Var 4> <Var 5>}>}> <Var 1>}>}>}> <Var 1>>
   <Equation <Compound "*" {<Compound "i" {<Compound "*" {<Var 3> <Var 0>}>}> <Compound "*" {<Var 3> <Var 1>}>}> <Compound "*" {<Compound "i" {<Var 0>}> <Var 1>}>>
   <Equation <Compound "i" {<Compound "*" {<Compound "i" {<Var 1>}> <Var 0>}>}> <Compound "*" {<Compound "i" {<Var 0>}> <Var 1>}>>
   <Equation <Compound "i" {<Compound "i" {<Var 0>}>}> <Var 0>>
   <Equation <Compound "i" {<Compound "*" {<Var 1> <Var 0>}>}> <Compound "*" {<Compound "i" {<Var 0>}> <Compound "i" {<Var 1>}>}>>
 })
