; Implementation of _complete_ term rewriting system in Egison

(load-file "term.egi")

(define $equation
  (matcher
     ; undirected equation
    {[<equation $ $ $> [integer term term]
      {[<Equation $n $l $r> {[n l r] [n r l]}]
       [_ {}]}]
     ; directed equation
     [<dequation $ $ $> [integer term term]
      {[<Equation $n $l $r> {[n l r]}]
       [_ {}]}]
     [$ something
      {[$tgt {tgt}]}]
     }))

; > (match-all <Equation 0 1 2> equation [<equation _ $x $y> [x y]])
; {[1 2] [2 1]}
; > (match-all <Equation 0 1 2> equation [<dequation _ $x $y> [x y]])
; {[1 2]}

(define $eql (lambda [$n $x $y] <Equation n x y>))

(define $efv
  (lambda [$eq]
    (unique
      (match eq equation
        {[<equation _ $l $r> (append (fv l) (fv r))]}))))

(define $esubst
  (match-lambda [something equation]
    {[[$u <equation $n $l $r>] <Equation n (tsubst u l) (tsubst u r)>]}))

; term -> {equation} -> term
(define $rewrite
  (match-lambda [term (multiset equation)]
    {[[<subterm $subtm $context>
       (& <cons <dequation _ <unify-ord ,subtm $sigma> $r> _> $axioms)]
      (rewrite (debug/fn show-term (context (tsubst sigma r))) axioms)]
     [[$t _] t]
     }))

(assert-equal "rewrite1"
  (rewrite (app "+" two one) axioms-of-nat)
  three)
(assert-equal "rewrite2"
  (rewrite (p (p y y') e) axioms-of-groups)
  e)
(assert-equal "rewrite3"
  (rewrite (p (p y z) (i (p y z))) axioms-of-groups)
  e)
(assert-equal "rewrite 4"
  (rewrite (p e x) axioms-of-groups)
  (p e x))

(define $unique-unordered-pairs
  (lambda [$xs]
    (letrec {[$loop-fn
              (lambda [$xs $ys]
                (match [xs ys] [(list equation) (multiset equation)]
                  {[[<nil> _] ys]
                   [[<cons <equation _ $l $r> $rs> <cons <equation _ ,l ,r> _>]
                      (loop-fn rs ys)]
                   [[<cons $x $rs>  _] (loop-fn rs {@ys x})]}))]}
      (loop-fn xs {}))))

;;======================= Knuth-Bendix completion ==============================

; rename free variables of each axioms so that they don't collide
(define $rename-problem
  (match-lambda [integer (list equation)]
    {[[$n <nil>]
      {}]
     [[$n <cons $e $es>]
      (let {[$u (zip (efv e)
                     ; n, n+1, ... の新しいvarを生成
                     (map (lambda $x <Var x>) (from n)))]}
        (cons (esubst u e)
              (rename-problem (+ n (length u)) es)))]}))

(define $joinable?
  (match-lambda [something equation]
    {[[_ <equation _ $s ,s>] #t]
     [[$axioms <equation _ $s $t>]
        (eq? (rewrite (debug/fn show-term s) axioms)
             (rewrite (debug/fn show-term t) axioms))
      ]}))

(define $critical-pairs'
  (lambda [$n $axioms]
    (unique-unordered-pairs
      (match-all (rename-problem 0 axioms) (set equation)
        {[<cons <equation ,n $l1 $r1>
          <cons <equation _ <subterm <unify ,l1 $sigma> $context> $r2> _>>
          (eql (+ n 1) (tsubst sigma r2) (tsubst sigma (context r1)))
          ]
         [<cons <equation !,n $l1 $r1>
          <cons <equation ,n <subterm <unify ,l1 $sigma> $context> $r2> _>>
          (eql (+ n 1) (tsubst sigma r2) (tsubst sigma (context r1)))
          ]}
        ))))

(define $critical-pairs
  (lambda [$n $axioms]
    (let {[$crit (critical-pairs' n axioms)]}
      (let {[$crit' (map orient-equation
                         (filter
                           (lambda [$x] (not (joinable? axioms x)))
                           crit))]}
        (io (do
          {[(print (S.concat {(show (length crit)) " critical pairs generated"}))]
           [(print (show-equations crit))]
           [(print (S.concat {(show (length crit')) " remained"}))]
           [(print (show-equations crit'))]}
           (return crit')))))))

(define $orient-equation
  (lambda [$e]
    (match e equation
      {[<equation $n $l $r>
                  (if (succ? l r) e (eql n r l))]})))

(define $complete-loop
  (lambda [$n $axioms]
    (match (critical-pairs n axioms) (multiset equation)
      {[<nil> axioms]
       [$c (complete-loop (+ n 1) (union axioms c))]})))

(define $complete
  (complete-loop 0 $))

;;==============================================================================

(define $show-equation
  (match-lambda equation
    {[<equation _ $x $y> (S.concat {(show-term x) " = " (show-term y)})]}))

(define $show-equations
  (col-show/fn show-equation $1))

;;==============================================================================

(define $p (app "*" $1 $2)) ; product
(define $i (app "i" $1))    ; inverse
(define $e (app "e"))       ; 単位元

(define $a' (i a))
(define $b' (i b))
(define $c' (i c))
(define $d' (i d))

(define $x' (i x))
(define $y' (i y))
(define $z' (i z))
(define $w' (i w))

(define $axioms-of-groups
  {(eql 0 (p (p x y) z) (p x (p y z)))
   (eql 0 (p x x') e)            ; x * x' = e
   (eql 0 (p x e) x)             ; x * e = x
  })

(define $axioms-of-groups-complete
  {@axioms-of-groups
   (eql 0 (i (p y x)) (p x' y')) ; (y * x)' = x' * y'
   (eql 0 (p y' (p y x)) x)      ; y' * (y * x) = x
   (eql 0 (p x' x) e)            ; x' * x = e
   (eql 0 (i e) e)               ; e' = e
   (eql 0 (i x') x)              ; x'' = x
   (eql 0 (p e x) x)             ; e * x = x
   (eql 0 (p x (p x' y)) y)      ; x * (x' * y) = y
  })

; (a * a')' = e
(define $g1' (i (p a a')))
(define $g1 (eql 0 g1' e))

; (((b * c) * d)' * b)' * d' = c
(define $g2' (p (i (p (i (p (p b c) d)) b))
                (i d)))
(define $g2 (eql 0 g2' c))
; (((b * c) * d)' * b)' * d'
; = (d' * (b * c)' * b)' * d'
; = (d' * c' * b' * b)' * d'
; = (d' * c' * e)' * d'
; = (d' * c')' * d'
; = c'' * d'' * d'
; = c'' * d * d'
; = c'' * e
; = c * e
; = c

(define $g3 (eql 0 (p g1' g2') c))

; e * a = a
(define $g4 (eql 0 (p e a) a))

; a' * a = e
(define $g5 (eql 0 (p a' a) e))

;;==============================================================================

(define $zero  (app "O"))
(define $one   (app "S" (app "O")))
(define $two   (app "S" (app "S" (app "O"))))
(define $three (app "S" (app "S" (app "S" (app "O")))))
(define $four  (app "S" (app "S" (app "S" (app "S" (app "O"))))))

(define $axioms-of-nat
   ; O + x = x
  {(eql 0 (app "+" zero x) x)
   ; S(m) + n = m + S(n)
   (eql 0 (app "+" (app "S" x) y) (app "+" x (app "S" y)))
   })

(define $p7 (eql 0 (app "+" one two) three))
(define $p8 (eql 0 (app "+" zero two) two))

;;==============================================================================

; small example from
; https://github.com/mir-ikbch/compl_coq/blob/8.5/test-suite/test.v

(define $op (app "*" $1 $2))

; (x * y) * (y * z) = y
(define $axioms-ikebuchi
  {(eql 0 (op (op x y) (op y z)) y)})

; ex.
; ((a * b) * (b * c)) * ((b * c) * c) = b * c

; completion result in PLAR program:
; [<<(x3 * x0 * x1) * x1 = x0 * x1>>; <<x1 * (x1 * x2) * x5 = x1 * x2>>;
;  <<(x * y) * y * z = y>>]

;;==============================================================================

; small example from PLAR

; f(f(x)) = g(x)
(define $axioms-plar
  {(eql 0 (app "f" (app "f" x)) (app "g" x))})

; completion result:
; f(g(x)) = g(f(x)), g(x) = g(x)
