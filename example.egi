(define $p (app "*" $1 $2)) ; product
(define $i (app "i" $1))    ; inverse
(define $e (app "e"))

(define $axioms-of-groups
  {(eql (p e x) x)             ; e * x = x
   (eql (p (i x) x) e)         ; (i x) * x = e
   (eql (p (p x y) z) (p x (p y z)))
  })

(define $axioms-of-groups-right
  {(eql (p x e) x)             ; x * e = x
   (eql (p x (i x)) e)         ; x * (i x) = e
   (eql (p (p x y) z) (p x (p y z)))
  })

; Completed axioms-of-groups (interreduced)
(define $axioms-of-groups-complete
  {@axioms-of-groups
   (eql (i (p y x)) (p (i x) (i y))) ; i(y * x) = i(x) * i(y)
   (eql (p (i y) (p y x)) x)         ; i(y) * (y * x) = x
   (eql (i e) e)                     ; i(e) = e
   (eql (p x (i x)) e)               ; x * i(x) = e
   (eql (i (i x)) x)                 ; i(i(x)) = x
   (eql (p x e) x)                   ; x * e = x
   (eql (p x (p (i x) y)) y)         ; x * (i(x) * y) = y
  })

;;==============================================================================

(define $zero  (app "O"))
(define $one   (app "S" (app "O")))
(define $two   (app "S" (app "S" (app "O"))))
(define $three (app "S" (app "S" (app "S" (app "O")))))
(define $four  (app "S" (app "S" (app "S" (app "S" (app "O"))))))

(define $axioms-of-nat
   ; O + x = x
  {(eql (app "+" zero x) x)
   ; S(m) + n = m + S(n)
   (eql (app "+" (app "S" x) y) (app "+" x (app "S" y)))
   })

(define $p7 (eql (app "+" one two) three))
(define $p8 (eql (app "+" zero two) two))

;;==============================================================================

; small example from
; https://github.com/mir-ikbch/compl_coq/blob/8.5/test-suite/test.v

(define $op (app "*" $1 $2))

; (x * y) * (y * z) = y
(define $axioms-ikebuchi
  {(eql (op (op x y) (op y z)) y)})

; completion result:
; {(x * y) * y * z = y,
;  y * (y * w) * x7 = y * w,
;  (x4 * x * y) * y = x * y}

; ex.
; ((a * b) * (b * c)) * ((b * c) * c) = b * c
(assert-equal "axioms-ikebuchi"
  (rewrite (complete axioms-ikebuchi)
           (op (op (op a b) (op b c)) (op (op b c) c)))
  (op b c))

;;==============================================================================

; small example from PLAR

; f(f(x)) = g(x)
(define $axioms-plar
  {(eql (app "f" (app "f" x)) (app "g" x))})

; completion result:
; {f(f(x)) = g(x),
;  g(f(x)) = f(g(x))}

;;==============================================================================

; small example from
; http://www.nue.ie.niigata-u.ac.jp/toyama/lab-intro/TRS-intro/index.html

(define $rules-glass-replacement
  {(eql (app "S" (app "W" x)) (app "W" x)) ; S W = W
   (eql (app "B" x) (app "W" (app "S" x))) ; B = W S
   (eql (app "B" (app "B" x)) (app "B" x)) ; B B = B
   })
