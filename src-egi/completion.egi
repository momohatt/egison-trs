loadFile "rewrite.egi"

-- ======================= Knuth-Bendix completion =============================

renamePair eq1 eq2 :=
  let fvs1 := efv eq1
      fvs2 := efv eq2
      sigma1 := zip fvs1 (map (\x -> Var x) (from 0))
      sigma2 := zip fvs2 (map (\x -> Var x) (from (length fvs1)))
   in (esubst sigma1 eq1, esubst sigma2 eq2)

-- equation -> equation -> [(term, term)]
criticalPairs eq1 eq2 :=
  matchAll renamePair eq1 eq2 as (equation, equation) with
    | ( dequation $l1 $r1
      , dequation (subtermNonvar (unify #l1 $sigma) $context) $r2 ) ->
      (tsubst sigma r2, tsubst sigma (context r1))

-- equation -> [equation] -> [(term, term)]
criticalPairsForNewEq newEq oldEqs :=
  criticalPairs newEq newEq ++
    concat (map 1#(criticalPairs newEq %1) oldEqs) ++
      concat (map 1#(criticalPairs %1 newEq) oldEqs)

-- [equation] -> [(term, term)]
criticalPairsForSet eqs :=
  concat
    (matchAll eqs as set equation with
      | $eq1 :: $eq2 :: _ -> criticalPairs eq1 eq2)

orient fnOrd l r :=
  match ordT fnOrd l r as ordering with
    | greater -> [eql l r]
    | less -> [eql r l]
    | _ -> []

report eqs crits deferred :=
  print
    (S.concat
       [ show (length eqs), " eqs, "
       , show (length crits), " pending critical pairs; "
       , show (length deferred), " deferred" ])

termPair :=
  matcher
    | normalizeAndOrient #$fnOrd #$eqs $ as equation with
      | ($l, $r) -> orient fnOrd (rewrite eqs l) (rewrite eqs r)
      | _ -> []
    | ($, $) as (term, term) with
      | ($l, $r) -> [(l, r)]
    | $ as something with
      | $tgt -> [tgt]

-- simpler but slower
completeLoopSlow fnOrd eqs crits :=
  io do report eqs crits []
        return
          (match crits as multiset termPair with
            -- No pending or deferred critical pairs
            | [] -> eqs
            | ?2#(joinable? eqs %1 %2) :: $crits' ->
              completeLoopSlow fnOrd eqs crits'
            | normalizeAndOrient #fnOrd #eqs $newEq :: $crits' ->
              let newCrits := criticalPairsForNewEq newEq eqs
               in completeLoopSlow
                    fnOrd
                    (interreduce (eqs ++ [newEq]))
                    (crits' ++ newCrits)
            | _ -> [])

completeLoop fnOrd eqs crits deferred :=
  io do report eqs crits deferred -- 途中経過の出力
        return
          -- Note how deferred critical pair should be treated as 'multiset'
          (match (crits, deferred) as (list termPair, multiset termPair) with
            -- No pending or deferred critical pairs
            | ([], []) -> eqs

            -- No pending critical pairs, but there are some deferred ones
            | ([], ?2#(joinable? %1 %2) :: $defs') ->
              completeLoop fnOrd eqs crits defs'
            | ([], normalizeAndOrient #fnOrd #eqs $newEq :: $defs') ->
              let newCrits := criticalPairsForNewEq newEq eqs
               in completeLoop
                    fnOrd
                    (interreduce (eqs ++ [debug/fn showEquation newEq]))
                    newCrits
                    defs'
            | ([], _) -> [] -- Completion failed

            -- There are some pending critical pairs
            | (?2#(joinable? eqs %1 %2) :: $crits', _) ->
              completeLoop fnOrd eqs crits' deferred
            | (normalizeAndOrient #fnOrd #eqs $newEq :: $crits', _) ->
              let newCrits := criticalPairsForNewEq newEq eqs
               in completeLoop
                    fnOrd
                    (interreduce (eqs ++ [debug/fn showEquation newEq]))
                    (crits' ++ newCrits)
                    deferred
            | ($lr :: $crits', _) ->
              completeLoop fnOrd eqs crits' (lr :: deferred))

complete fnOrd eqs := completeLoop fnOrd eqs (criticalPairsForSet eqs) []

-- [equation] -> [equation]
interreduce :=
  \match as multiset equation with
    | dequation $l $r :: ($others & ?1#(joinable? %1 l r)) ->
      interreduce (debug/fn showEquations others)
    | $eqs -> eqs

-- =============================================================================

showTermPair :=
  \match as (term, term) with
    | ($l, $r) -> S.concat ["[", showTerm l, ", ", showTerm r, "]"]

showTermPairs := 1#(colShow/fn showTermPair %1)

-- =============================================================================

-- completion result without interreduction
axiomsOfGroupCompletionResultNotInterreduced :=
  [Equation (Compound "*" [Compound "e" [], Var 0]) (Var 0),
   Equation (Compound "*" [Compound "i" [Var 0], Var 0]) (Compound "e" []),
   Equation (Compound "*" [Compound "*" [Var 0, Var 1], Var 2]) (Compound "*" [Var 0, Compound "*" [Var 1, Var 2]]),
   Equation (Compound "*" [Compound "i" [Var 0], Compound "*" [Var 0, Var 2]]) (Var 2),
   Equation (Compound "*" [Compound "i" [Compound "e" []], Var 3]) (Var 3),
   Equation (Compound "*" [Compound "i" [Compound "i" [Var 3]], Compound "e" []]) (Var 3),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 4, Var 5]], Compound "*" [Var 4, Compound "*" [Var 5, Var 3]]]) (Var 3),
   Equation (Compound "*" [Compound "i" [Compound "i" [Var 0]], Var 2]) (Compound "*" [Var 0, Var 2]),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 0, Compound "e" []]], Compound "*" [Var 0, Var 5]]) (Var 5),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 0, Compound "i" [Var 5]]], Compound "*" [Var 0, Compound "e" []]]) (Var 5),
   Equation (Compound "*" [Compound "i" [Compound "*" [Compound "i" [Compound "*" [Var 2, Var 4]], Var 2]], Compound "e" []]) (Var 4),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 6, Compound "*" [Var 7, Var 5]]], Compound "*" [Var 6, Compound "*" [Var 7, Compound "*" [Var 5, Var 4]]]]) (Var 4),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 0, Compound "i" [Var 5]]] , Compound "*" [Var 0, Var 7] ]) (Compound "*" [Var 5, Var 7]),
   Equation (Compound "*" [Compound "i" [Compound "*" [Compound "i" [Compound "*" [Var 0, Var 2]], Var 0]] , Var 4]) (Compound "*" [Var 2, Var 4]),
   Equation (Compound "*" [Var 1, Compound "i" [Var 1]]) (Compound "e" []),
   Equation (Compound "*" [Var 1, Compound "*" [Compound "i" [Var 1], Var 4]]) (Var 4), Equation (Compound "*" [Var 1, Compound "e" []]) (Var 1),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 4, Compound "*" [Var 5, Compound "i" [Var 2]]]], Compound "*" [Var 4, Var 5]]) (Var 2),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 3, Compound "i" [Var 2]]], Var 3]) (Var 2),
   Equation (Compound "i" [Compound "*" [Compound "i" [Compound "*" [Var 4, Compound "*" [Var 5, Var 3]]], Compound "*" [Var 4, Var 5]]]) (Var 3),
   Equation (Compound "i" [Compound "*" [Compound "i" [Var 5], Compound "i" [Var 3]]]) (Compound "*" [Var 3, Var 5]),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 0, Compound "*" [Compound "i" [Compound "*" [Var 4, Var 6]], Var 4]]] , Var 0]) (Var 6),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 0, Compound "*" [Var 8, Compound "*" [Var 9, Var 7]]]] , Compound "*" [Var 0 , Compound "*" [Var 8, Compound "*" [Var 9, Compound "*" [Var 7, Var 6]]]]]) (Var 6),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 0, Compound "*" [Var 2, Compound "i" [Var 7]]]] , Compound "*" [Var 0, Compound "*" [Var 2, Var 9]]]) (Compound "*" [Var 7, Var 9]),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 0, Compound "*" [Compound "i" [Compound "*" [Var 7, Var 9]], Var 7]]] , Compound "*" [Var 0, Var 11]]) (Compound "*" [Var 9, Var 11]),
   Equation (Compound "*" [Var 3, Compound "*" [Compound "i" [Compound "*" [Var 1, Var 3]], Var 1]]) (Compound "e" []),
   Equation (Compound "*" [Var 3, Compound "*" [Compound "i" [Compound "*" [Var 1, Var 3]], Compound "*" [Var 1, Var 6]]]) (Var 6),
   Equation (Compound "*" [Var 3, Compound "i" [Compound "*" [Compound "i" [Var 6], Var 3]]]) (Var 6),
   Equation (Compound "i" [Compound "*" [Var 3, Compound "i" [Compound "*" [Var 1, Var 3]]]]) (Var 1),
   Equation (Compound "*" [Var 3, Compound "*" [Compound "i" [Compound "*" [Var 6, Compound "*" [Var 8, Var 3]]], Compound "*" [Var 6, Compound "*" [Var 8, Var 10]]]]) (Var 10),
   Equation (Compound "*" [Var 3, Compound "*" [Compound "i" [Compound "*" [Compound "i" [Var 7], Var 3]], Var 5]]) (Compound "*" [Var 7, Var 5]),
   Equation (Compound "i" [Compound "e" []]) (Compound "e" []),
   Equation (Compound "*" [Var 3, Compound "*" [Var 4, Compound "i" [Compound "*" [Var 3, Var 4]]]]) (Compound "e" []),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 2, Var 0]], Var 2]) (Compound "i" [Var 0]),
   Equation (Compound "*" [Var 3, Compound "i" [Compound "i" [Compound "i" [Var 3]]]]) (Compound "e" []),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 2, Compound "*" [Var 4, Var 0]]], Compound "*" [Var 2, Var 4]]) (Compound "i" [Var 0]),
   Equation (Compound "i" [Compound "*" [Var 0, Compound "i" [Var 5]]]) (Compound "*" [Var 5, Compound "i" [Var 0]]),
   Equation (Compound "*" [Var 4 , Compound "*" [Var 5 ,Compound "*" [Compound "i" [Compound "*" [Var 4, Var 5]], Var 1]]]) (Var 1),
   Equation (Compound "*" [Compound "i" [Compound "*" [Var 3, Var 0]], Compound "*" [Var 3, Var 1]]) (Compound "*" [Compound "i" [Var 0], Var 1]),
   Equation (Compound "i" [Compound "*" [Compound "i" [Var 1], Var 0]]) (Compound "*" [Compound "i" [Var 0], Var 1]),
   Equation (Compound "i" [Compound "i" [Var 0]]) (Var 0),
   Equation (Compound "i" [Compound "*" [Var 1, Var 0]]) (Compound "*" [Compound "i" [Var 0], Compound "i" [Var 1]])]

axiomsOfGroupCompletionResult :=
  [ Equation (Compound "*" [Compound "e" [], Var 0]) (Var 0)
  , Equation (Compound "*" [Compound "i" [Var 0], Var 0]) (Compound "e" [])
  , Equation
      (Compound "*" [Compound "*" [Var 0, Var 1], Var 2])
      (Compound "*" [Var 0, Compound "*" [Var 1, Var 2]])
  , Equation
      (Compound "*" [Compound "i" [Var 0], Compound "*" [Var 0, Var 2]])
      (Var 2)
  , Equation (Compound "*" [Var 1, Compound "i" [Var 1]]) (Compound "e" [])
  , Equation
      (Compound "*" [Var 1, Compound "*" [Compound "i" [Var 1], Var 4]])
      (Var 4)
  , Equation (Compound "*" [Var 1, Compound "e" []]) (Var 1)
  , Equation (Compound "i" [Compound "e" []]) (Compound "e" [])
  , Equation (Compound "i" [Compound "i" [Var 0]]) (Var 0)
  , Equation
      (Compound "i" [Compound "*" [Var 1, Var 0]])
      (Compound "*" [Compound "i" [Var 0], Compound "i" [Var 1]]) ]
