-- term-related definition

loadFile "utils.egi"

term :=
  matcher
    | var $ as integer with
      | Var $i -> [i]
      | _ -> []
    | compound $ $ as (string, list term) with
      | Compound $s $l -> [(s, l)]
      | _ -> []
    | unify #$t $ as something with
      | $s -> match unify [] [(s, t)] as maybe something with
                | nothing -> []
                | just $sigma -> [sigma]
    | termMatch #$t $ as something with
      | $s -> match termMatch [] [(s, t)] as maybe something with
                | nothing -> []
                | just $sigma -> [sigma]
    -- subterm at non-variable position
    | subtermNonvar $ $ as (term, something) with
      | $s -> subtermNonvar s
    | $ as something with
      | $tgt -> [tgt]

var n := Var n

app :=
  cambda xs ->
    match xs as list something with
      | $x :: $xs -> Compound x xs

tsubst :=
  \match as (something, term) with
    | ($u, var $n) ->
      match u as multiset (integer, term) with
        | (#n, $t) :: _ -> t
        | _ -> Var n
    | ($u, compound $f $xs) -> Compound f (map 1#(tsubst u %1) xs)

-- term -> (term, term -> term)
subterm :=
  \matchAll as term with
    | compound $f ($xs ++ subterm $x $context :: $xs') ->
      let context' x := Compound f (xs ++ x :: xs')
       in (x, compose context context')
    | $t -> (t, id)

-- term -> (term, term -> term)
subtermNonvar :=
  \matchAll as term with
    | compound $f ($xs ++ subtermNonvar $x $context :: $xs') ->
      let context' x := Compound f (xs ++ x :: xs')
       in (x, compose context context')
    | !(var _) & $t -> (t, id)

occur := \v => var ~v | compound _ (_ ++ occur ~v :: _)

fv :=
  \matchAll as term with
    | occur $v -> v

update :=
  \match as ((string, term), something) with
    | (($x, $t), $sigma) -> sigma ++ [(x, tsubst sigma t)]

-- [(var, term)] -> [(term, term)] -> Maybe [(var, term)]
unify sigma termPairs :=
  match termPairs as list (unorderedPair term) with
    | [] -> Just sigma
    | (var $x, var #x) :: $ps -> unify sigma ps
    | (var $x, compound _ _ & occur #x) :: _ -> Nothing
    | (var $x, $t) :: $ps ->
      let ps' := map (\t1 t2 -> (tsubst [(x, t)] t1, tsubst [(x, t)] t2)) ps
       in match unify sigma ps' as maybe something with
            | nothing -> Nothing
            | just $sigma' -> Just (update (x, t) sigma')
    | (compound $f $xs, compound #f $ys) :: $p' ->
      if length xs = length ys then unify sigma (zip xs ys ++ p') else Nothing
    | _ -> Nothing

-- [(var, term)] -> [(term, term)] -> Maybe [(var, term)]
termMatch sigma termPairs :=
  match termPairs as list (term, term) with
    | [] -> Just sigma
    | ( compound $f $xs
      , compound #f ($ys & ?(\ys -> length xs = length ys)) ) :: $p' ->
      termMatch sigma (zip xs ys ++ p')
    | (var $x, $t) :: $p' ->
      match sigma as multiset (string, term) with
        | (#x, #t) :: _ -> termMatch sigma p'
        | (#x, _) :: _ -> Nothing
        | _ -> termMatch ((x, t) :: sigma) p'
    | _ -> Nothing

-- ================================= LPO =======================================

-- extend ordering of terms to lists of terms
-- assumes that the two input lists have the same length
lpo? :=
  \match as (something, list term, list term) with
    | ($fnOrd, $s :: $sx, #s :: $tx) -> lpo? fnOrd sx tx
    | ($fnOrd, $s :: _, ?1#(succ? fnOrd s %1) :: _) -> True
    | _ -> False

terminate? fnOrd x ts := all 1#(succ? fnOrd x %1) ts

-- f >? g
sigord fnOrd f g :=
  if f = g
    then False
    else match fnOrd as list something with
      | _ ++ #g :: _ ++ #f :: _ -> True
      | _ ++ #f :: _ ++ #g :: _ -> False
      | _ -> undefined

-- Lexicographic Path Order
ordT fnOrd x y :=
  match (x, y) as (term, term) with
    | (_, #x)
    -> Equal
    |   (compound $f $ss,           compound #f (?1#(lpo? fnOrd ss %1) & ?1#(terminate? fnOrd x %1)))
      | (compound _ (_ ++ #y :: _), _)
      | (compound _ (_ ++ $s :: _), ?1#(succ? fnOrd s %1))
      | (compound $f _,             compound ?1#(sigord fnOrd f %1) ?1#(terminate? fnOrd x %1))
    -> Greater
    |   { (compound $f                          @                        , compound #f $ss)
        ,              ?1#(lpo? fnOrd ss %1) & ?1#(terminate? fnOrd y %1) }
      | (_, compound _ (_ ++ #x :: _))
      | { (        @            , compound _ (_ ++ $s :: _))
        ,  ?1#(succ?  fnOrd s %1) }
      | (compound $f ?1#(terminate? fnOrd y %1), compound ?1#(sigord fnOrd %1 f) _)
    -> Less
    | _ -> Undefined

-- x \succ? y
succ? fnOrd x y := ordT fnOrd x y = Greater

-- =============================================================================

showTerm :=
  \match as term with
    | var $x -> S.concat ["x", show x]
    | compound $f #[] -> f
    | compound #"+" ((compound #"+" _ & $x) :: $y :: []) ->
      S.concat ["(", showTerm x, ") + ", showTerm y]
    | compound #"+" ($x :: $y :: []) -> S.concat [showTerm x, " + ", showTerm y]
    | compound #"*" ((compound #"*" _ & $x) :: $y :: []) ->
      S.concat ["(", showTerm x, ") * ", showTerm y]
    | compound #"*" ($x :: $y :: []) -> S.concat [showTerm x, " * ", showTerm y]
    | compound $f $xs ->
      S.concat [f, "(", S.intercalate ", " (map showTerm xs), ")"]

showTerms := 1#(colShow/fn showTerm %1)
