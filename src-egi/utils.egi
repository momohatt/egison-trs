--
-- This file has been auto-generated by egison-translator.
--

unorderedPair m :=
  matcher
    | ($, $) as (m, m) with
      | ($x, $y) -> [(x, y), (y, x)]
    | $ as (something) with
      | $tgt -> [tgt]

compareC/fn ord c1 c2 :=
  match (c1, c2) as (list something, list something) with
    | ([], []) -> Equal
    | ([], _) -> Less
    | (_, []) -> Greater
    | ($x :: $xs, #x :: $ys) -> compareC/fn ord xs ys
    | ($x :: _, $y :: _) -> ord x y

neq? x y := not (x = y)

eq?/fn ord x y := ord x y = Equal

gt?/fn ord x y := ord x y = Greater

geq?/fn ord x y := eq?/fn ord x y || gt?/fn ord x y

colShow/fn show set := S.concat ["[", S.intercalate ",\n " (map show set), "]"]

pairShow/fn :=
  \match as (something, (something, something)) with
    | ($show, ($s, $t)) -> S.concat ["[", show s, ", ", show t, "]"]
    | (_, $p) -> show p

debug/fn show x :=
  io do print (show x)
        return x
