(define $unordered-pair
  (lambda [$m]
    (matcher
      {[<pair $ $> [m m] {[[$x $y] {[x y] [y x]}]}]
      [$ [something] {[$tgt {tgt}]}]})))

(assert-equal "unique-unordered-pair"
  (unique-unordered-pair {[1 2] [2 1]})
  {[1 2]})

(define $compare-c/fn
  (lambda [$ord $c1 $c2]
    (match [c1 c2] [(list something) (list something)]
      {[[<nil> <nil>] <Equal>]
       [[<nil> _] <Less>]
       [[_ <nil>] <Greater>]
       [[<cons $x $xs> <cons ,x $ys>] (compare-c/fn ord xs ys)]
       [[<cons $x _> <cons $y _>] (ord x y)]})))

(define $neq? (lambda [$x $y] (not (eq? x y))))

(define $col-show/fn
  (lambda [$show $set]
    (S.concat {"{" (S.intercalate ",\n " (map show set)) "}"})))

(define $pair-show/fn
  (match-lambda [something [something something]]
    {[[$show [$s $t]]
      (S.concat {"[" (show s) ", " (show t) "]"})]
     [[_ $p] (show p)]}))

(define $debug/fn
  (macro [$show $x]
    (io (do {[(print (show x))]}
          (return x)))))
